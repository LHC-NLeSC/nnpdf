from scipy.interpolate import interp1d
import numpy as np
import math
import pathlib
from reportengine.compat import yaml
import shutil


class LhapdfLike:
    """
    Class which emulates lhapdf but only for an initial condition PDF (i.e. with only one q2 value)
    """

    pids_dict = {
        -6: "TBAR",
        -5: "BBAR",
        -4: "CBAR",
        -3: "SBAR",
        -2: "UBAR",
        -1: "DBAR",
        21: "GLUON",
        1: "D",
        2: "U",
        3: "S",
        4: "C",
        5: "B",
        6: "T",
        22: "PHT",
    }
    pids_order = [
        "TBAR",
        "BBAR",
        "CBAR",
        "SBAR",
        "UBAR",
        "DBAR",
        "GLUON",
        "D",
        "U",
        "S",
        "C",
        "B",
        "T",
        "PHT",
    ]

    def __init__(self, pdf_grid, q20, x_grid):
        self.pdf_grid = pdf_grid
        self.q20 = q20
        self.x_grid = x_grid
        self.funcs = [
            interp1d(self.x_grid, self.pdf_grid[pid], kind="cubic")
            for pid in range(len(self.pids_order))
        ]

    def xfxQ2(self, pid, x, q2):
        """
        Return the value of the PDF for the requested pid and x value. If the requested q2
        value is different from the (only) value available, it raises an error.

        Parameters
        ----------

            pid: int
                pid index of particle
            x: float
                x-value
            q2: float
                Q square value

        Returns
        -------
            : float
            x * PDF value
        """
        if not math.isclose(q2, self.q20, rel_tol=1e-6):
            raise ValueError("The q2 requested is not the fitting scale of this pdf")
        return self.funcs[self.pids_order.index(self.pids_dict[pid])](x)

    def hasFlavor(self, pid):
        """
        Check if the requested pid is in the PDF.
        """
        return pid in self.pids_dict.keys()


def read_runcard(usr_path):
    """
    reads the runcard and returns the relevant information for evolven3fit
    """
    return yaml.safe_load((usr_path / "filter.yml").read_text())


def generate_q2grid(Q0, Qfin, Q_points):
    """
    Generate the q2grid used in the final evolved pdfs (Temporary solution)
    """
    if (Qfin is None) or (Q_points is None):   
        return [1.6500000e+00, 1.7874388e+00, 1.9429053e+00, 2.1193749e+00, 2.3204100e+00,
                2.5502944e+00, 2.8142025e+00, 3.1184122e+00, 3.4705775e+00, 3.8800751e+00, 4.3584516e+00,
                4.9200000e+00, 4.9200000e+00, 5.5493622e+00, 6.2897452e+00, 7.1650687e+00, 8.2052867e+00,
                9.4481248e+00, 1.0941378e+01, 1.2745972e+01, 1.4940062e+01, 1.7624572e+01, 2.0930715e+01,
                2.5030298e+01, 3.0149928e+01, 3.6590777e+01, 4.4756282e+01, 5.5191298e+01, 6.8637940e+01,
                8.6115921e+01, 1.0903923e+02, 1.3938725e+02, 1.7995815e+02, 2.3474820e+02, 3.0952544e+02,
                4.1270732e+02, 5.5671861e+02, 7.6011795e+02, 1.0509694e+03, 1.4722574e+03, 2.0906996e+03,
                3.0112909e+03, 4.4016501e+03, 6.5333918e+03, 9.8535186e+03, 1.5109614e+04, 2.3573066e+04,
                3.7444017e+04, 6.0599320e+04, 1.0000000e+05] 
    return np.geomspace(Q0**2, Qfin**2, num=Q_points).tolist()


def generate_x_grid():
    """
    Generate the xgrid used for the eko
    """
    return [1e-09, 1.29708482343957e-09, 1.68242903474257e-09, 2.18225315420583e-09, 2.83056741739819e-09,
            3.67148597892941e-09, 4.76222862935315e-09, 6.1770142737618e-09, 8.01211109898438e-09,
            1.03923870607245e-08, 1.34798064073805e-08, 1.74844503691778e-08, 2.26788118881103e-08,
            2.94163370300835e-08, 3.81554746595878e-08, 4.94908707232129e-08, 6.41938295708371e-08,
            8.32647951986859e-08, 1.08001422993829e-07, 1.4008687308113e-07, 1.81704331793772e-07,
            2.35685551545377e-07, 3.05703512595323e-07, 3.96522309841747e-07, 5.1432125723657e-07,
            6.67115245136676e-07, 8.65299922973143e-07, 1.12235875241487e-06, 1.45577995547683e-06,
            1.88824560514613e-06, 2.44917352454946e-06, 3.17671650028717e-06, 4.12035415232797e-06,
            5.3442526575209e-06, 6.93161897806315e-06, 8.99034258238145e-06, 1.16603030112258e-05,
            1.51228312288769e-05, 1.96129529349212e-05, 2.54352207134502e-05, 3.29841683435992e-05,
            4.27707053972016e-05, 5.54561248105849e-05, 7.18958313632514e-05, 9.31954227979614e-05,
            0.00012078236773133, 0.000156497209466554, 0.000202708936328495, 0.000262459799331951,
            0.000339645244168985, 0.000439234443000422, 0.000567535660104533, 0.000732507615725537,
            0.000944112105452451, 0.00121469317686978, 0.00155935306118224, 0.00199627451141338,
            0.00254691493736552, 0.00323597510213126, 0.00409103436509565, 0.00514175977083962,
            0.00641865096062317, 0.00795137940306351, 0.009766899996241, 0.0118876139251364,
            0.0143298947643919, 0.0171032279460271, 0.0202100733925079, 0.0236463971369542,
            0.0274026915728357, 0.0314652506132444, 0.0358174829282429, 0.0404411060163317,
            0.0453171343973807, 0.0504266347950069, 0.0557512610084339, 0.0612736019390519,
            0.0669773829498255, 0.0728475589986517, 0.0788703322292727, 0.0850331197801452,
            0.0913244910278679, 0.0977340879783772, 0.104252538208639, 0.110871366547237, 0.117582909372878,
            0.124380233801599, 0.131257062945031, 0.138207707707289, 0.145227005135651, 0.152310263065985,
            0.159453210652156, 0.166651954293987, 0.173902938455578, 0.181202910873333, 0.188548891679097,
            0.195938145999193, 0.203368159629765, 0.210836617429103, 0.218341384106561, 0.225880487124065,
            0.233452101459503, 0.241054536011681, 0.248686221452762, 0.256345699358723, 0.264031612468684,
            0.271742695942783, 0.279477769504149, 0.287235730364833, 0.295015546847664, 0.302816252626866,
            0.310636941519503, 0.318476762768082, 0.326334916761672, 0.334210651149156, 0.342103257303627,
            0.350012067101685, 0.357936449985571, 0.365875810279643, 0.373829584735962, 0.381797240286494,
            0.389778271981947, 0.397772201099286, 0.40577857340234, 0.413796957540671, 0.421826943574548,
            0.429868141614175, 0.437920180563205, 0.44598270695699, 0.454055383887562, 0.462137890007651,
            0.470229918607142, 0.478331176755675, 0.486441384506059, 0.494560274153348, 0.502687589545177,
            0.510823085439086, 0.518966526903235, 0.527117688756998, 0.535276355048428, 0.543442318565661,
            0.551615380379768, 0.559795349416641, 0.5679820420558, 0.576175281754088, 0.584374898692498,
            0.59258072944444, 0.60079261666395, 0.609010408792398, 0.61723395978245, 0.625463128838069,
            0.633697780169485, 0.641937782762089, 0.650183010158361, 0.658433340251944, 0.666688655093089,
            0.674948840704708, 0.683213786908386, 0.691483387159697, 0.699757538392251, 0.708036140869916,
            0.716319098046733, 0.724606316434025, 0.732897705474271, 0.741193177421404, 0.749492647227008,
            0.757796032432224, 0.766103253064927, 0.774414231541921, 0.782728892575836, 0.791047163086478,
            0.799368972116378, 0.807694250750291, 0.816022932038457, 0.824354950923382, 0.832690244169987,
            0.841028750298844, 0.8493704095226, 0.857715163684985, 0.866062956202683, 0.874413732009721,
            0.882767437504206, 0.891124020497459, 0.899483430165226, 0.907845617001021, 0.916210532771399,
            0.924578130473112, 0.932948364292029, 0.941321189563734, 0.949696562735755, 0.958074441331298,
            0.966454783914439, 0.974837550056705, 0.983222700304978, 0.991610196150662, 1.0]

def fix_info_path(usr_path):
    """Fix the location of the info file from the folder nnfit/usr_path to 
    just nnfit
    """
    nnfit = usr_path / "nnfit"
    info_file = usr_path.stem + ".info"
    info_file_path = nnfit / usr_path.stem / info_file
    dest_path_info = nnfit / info_file
    shutil.move(info_file_path, dest_path_info)


def fix_replica_path(usr_path, replica_num):
    """Fix the location of the dat file of the replica <replica_num> from the folder nnfit/usr_path to 
    just nnfit/replica_<replica_num>
    """
    nnfit = usr_path / "nnfit"
    replica_file_path = nnfit / usr_path.stem / f"{usr_path.stem}_{replica_num:04d}.dat"
    dest_path_replica = nnfit / f"replica_{replica_num}" / f"{usr_path.stem}.dat"
    shutil.move(replica_file_path, dest_path_replica)
